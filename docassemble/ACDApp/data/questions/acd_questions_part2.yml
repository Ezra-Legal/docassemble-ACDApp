# Substitute Decision-makers are collected into part2a which is
# a list of Individuals.  The list needs to be limited to three
# and must have at least one if have_sdm is true.
#
# Conditions of appointment is Part 2b.  Just a single
# (and simple) question block
---
objects:
  - part2a: DAList.using(object_type=Individual)
---
# Processes the part 2 Individuals
code: |
  # This gets us everything
  for a_sdm in part2a:
    a_sdm
  process_part_2 = True
---
# Fills any missing SDMs with empty values so we can still
# populate the PDF
code: |
  # Add empty Individual()s for the SDMs we don't have
  for ACDindex in range(len(part2a), ACDconstants.max_decision_makers):
    # Just get the value of 'z'.  The rest will get populated by the 
    # generic object code block
    part2a[ACDindex] = Individual()
    part2a[ACDindex].z
  process_part_2_blanks = True
---
# Set there_are_any depending on the answer of have_sdm
code: |
  if has_sdm:
    part2a.there_are_any = True
  else:
    part2a.there_are_any = False
---
# But we set there_is_another to true only if we don't have
# three DMs
code: |
  part2a_len = len(part2a)
  part2a_index = part2a_len - 1
  if  part2a_len < ACDconstants.max_decision_makers and part2a[part2a_index].another_dm:
    part2a.there_is_another = True
  else:
    part2a.there_is_another = False
---
question: "Part 2: Substitute Decision-Makers"
subquestion: |
  If you wish, you may appoint up to three Substitute Decision-Makers.  A Substitute
  Decision-Maker is a person who you allow to make decision regarding your care as set
  out in this Advance Care Directive.

  You do not need to appoint any Substitute Decision-Makers if you do not wish.

  if you do appoint Substitute Decision Maker(s), you must provide each
  Substitute Decision-Maker with the 
  [Substitute Decision-Maker Guidelines](https://advancecaredirectives.sa.gov.au/information-for-you/substitute-decision-makers)
  prior to their signing Part 2a of your Advance Care Directive

  **Would you like to add one or more substitute decision-makers?**
yesno: has_sdm
---
question: "Part 2: Substitute Decision-Makers"
subquestion: |
  Who do you appoint as your ${ ordinal(i) } substitute
  decision-maker?
fields:
  - First name: part2a[i].name.first
  - Middle name: part2a[i].name.middle
    required: false
  - Last name: part2a[i].name.last
  - Date of birth: part2a[i].birthdate
    datatype: date
  - Phone number: part2a[i].phone_number
  - Unit: part2a[i].address.unit
    required: false
  - Number and street:  part2a[i].address.address
  - Suburb: part2a[i].address.city
  - Postcode: part2a[i].address.postal_code
  - State: part2a[i].address.state
    choices:
      - ACT: ACT
      - New South Wales: NSW
      - Northern Territory: NT
      - Queensland: QLD
      - South Australia: SA
      - Tasmania: Tas
      - Western Australia: WA
      - Victoria: Vic
    default: SA
---
# Ask if we want to add another DM
question: "Part 2: Substitute Decision-Makers"
subquestion: |
  Would you like to add another Substitute Decision-Maker?
yesno: part2a[i].another_dm
---
# Part 2b question
question: "Part 2b: Conditions of Appointment"
subquestion: |
  As you have selected more than one Substitute Decision-Maker, you need to specify
  how you would like your Substitute Decision-Makers to co-operate when it comes to
  making decisions about your care.

  You may select from one of the pre-prepared statements below, or you can select '*I want
  something else*' to specify your own instructions.
fields:
  - no label: part2b_first_part
    datatype: radio
    choices:
      - Together
      - Separately
      - I want something else: something_else
  - no label: part2b_second_part
    input type: area
    hint: Type your instructions for your Substitute Decision-Makers here
    show if:
      variable: part2b_first_part
      is: something_else
---
# Part 2b logic
# If there is only one SDM then we just populate the field with a 'N/A'.
# If there is more than one SDM
# - ask the question
# - Take the value of part2b_first_part unless it is 'something_else'
# - otheriwse take the value of part2b_second_part
code: |
  # Count SDMs by counting the number of part2a[i].z that have a 'Z' value
  number_sdms = 0
  for an_item in part2a:
    if an_item.z == "":
      number_sdms += 1
    else:
      break

  if number_sdms <= 1:
    part2b = 'N/A'
  elif part2b_first_part != 'something_else':
    part2b = part2b_first_part
  else:
    part2b = part2b_second_part
---
# Populates the fields to display in the PDF
# Also sets the 'Z' for part2b SDMs that are empty
generic object: Individual
code: |
  try:
    x.full_name = x.name.full(middle="full")
    x.formatted_address = '{} {} {} {}'.format(x.address.address, x.address.city.upper(), x.address.state, x.address.postal_code)
    x.formatted_phone = x.phone_number
    x.z = ""
  except:
    x.full_name = ""
    x.formatted_address = ""
    x.formatted_phone = ""
    x.z = "Z"
---
# We do the birthdates separately as not all Individuals
# required DOBs (eg: interpreter in part 5)
generic object: Individual
code: |
  try:
    x.day = x.birthdate.day
    x.month = x.birthdate.month
    x.year = x.birthdate.year
  except:
    x.day = ""
    x.month = ""
    x.year = ""
---