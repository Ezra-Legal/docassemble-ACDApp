# Substitute Decision-makers are collected into part2a which is
# a list of Individuals.  The list needs to be limited to three
# and must have at least one if have_sdm is true.
#
# Conditions of appointment is Part 2b.  Just a single
# (and simple) question block
---
objects:
  - part2a: DAList.using(object_type=Individual)
---
# Processes the part 2 Individuals
code: |
  # This gets us everything
  for a_sdm in part2a:
    a_sdm
  process_part_2 = True
---
# Fills any missing SDMs with empty values so we can still
# populate the PDF
code: |
  part2a_len = len(part2a)
  # If we're full we don't do anything
  if part2a_len == ACDconstants.max_decision_makers:
    process_part_2_blanks = True
  
  # Otherwise we fill in the blanks
  for ACDindex in range(part2a_len, ACDconstants.max_decision_makers):
    part2a[ACDindex] = DAEmpty()
  process_part_2_blanks = True
---
# Set there_are_any depending on the answer of have_sdm
code: |
  if has_sdm:
    part2a.there_are_any = True
  else:
    part2a.there_are_any = False
---
# But we set there_is_another to true only if we don't have
# three DMs
code: |
  part2a_len = len(part2a)
  part2a_index = part2a_len - 1
  if  part2a_len < ACDconstants.max_decision_makers and part2a[part2a_index].another_dm:
    part2a.there_is_another = True
  else:
    part2a.there_is_another = False
---
question: Substitute Decision-makers
subquestion: |
  You must provide the Substitute Decision-Maker 
  with the Substitute Decision-Maker Guidelines prior to 
  completing this section.

  Text about SDMs

  Would you like to add one or more substitute decision-makers?
yesno: has_sdm
---
question: Substitute Decision-makers
subquestion: |
  Who do you appoint as your ${ ordinal(i) } substitute
  decision-maker?
fields:
  - First name: part2a[i].name.first
  - Middle name: part2a[i].name.middle
  - Last name: part2a[i].name.last
  - Date of birth: part2a[i].birthdate
    datatype: date
  - Phone number: part2a[i].phone_number
  - Unit: part2a[i].address.unit
    required: false
  - Number and street:  part2a[i].address.address
    default: ${ i } Booga Road
  - Suburb: part2a[i].address.city
    default: Dogaloolo
  - Postcode: part2a[i].address.postal_code
    default: 5093
  - State: part2a[i].address.state
    choices:
      - ACT: ACT
      - New South Wales: NSW
      - Northern Territory: NT
      - Queensland: QLD
      - South Australia: SA
      - Tasmania: Tas
      - Western Australia: WA
      - Victoria: Vic
    default: SA
---
# Ask if we want to add another DM
question: Would you like to add another decision-maker?
subquestion: |
  I is ${ i }
yesno: part2a[i].another_dm
---
# Part 2b question
question: Conditions of Appointment
subquestion: |
  If you have appointed one or more Substitute Decision-Makers do
  you want them to make decisions together or separately?
fields:
  - no label: part2b_first_part
    datatype: radio
    choices:
      - I want my Substitute Decision-Makers to come to a decision together by consensus (all must agree)
      - I want my Substitute Decision-Makers to come to a decision together by majority (two out of three must agree)
      - I want my Substitute Decision-Makers to come to a decision separately (any Decision-Maker can make a decision about me independently of the others)
      - I want something else: something_else
  - no label: part2b_second_part
    datatype: textarea
    hint: Type your instructions for your Substitute Decision-Makers here
    show if:
      variable: part2b_first_part
      is: something_else
---
# Part 2b logic
# If there is only one SDM then we just populate the field with a 'N/A'.
# If there is more than one SDM
# - ask the question
# - Take the value of part2b_first_part unless it is 'something_else'
# - otheriwse take the value of part2b_second_part
code: |
  # part2a always has three elements.  We need to count the number
  # of non-None elements to work out how many SDMs are appointed
  number_sdm = 0
  for item in part2a:
    if item is None:
      break
    else:
      number_sdm += 1
  
  if number_sdm <= 1:
    part2b = 'N/A'
  elif part2b_first_part != 'something_else':
    part2b = part2b_first_part
  else:
    part2b = part2b_second_part
---